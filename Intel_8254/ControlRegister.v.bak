module ControlRegister (
inout [7:0]  Data,
input WriteSignal,
input [5:0] cw0_i,
input [5:0] cw1_i,
input [5:0] cw2_i,
input [2:0] EnabStatusLatches_i,
output [5:0] cw0_o,
output [5:0] cw1_o,
output [5:0] cw2_o,
output [2:0] EnabStatusLatches_o
);


reg [7:0] ControlWord;


assign cw0_o = (ControlWord[7:6] == 2'b00) ? ControlWord[5:0] :
			(ControlWord[7:6] == 2'b11 && ControlWord[1] ==1'b1 && ControlWord[5]==1'b0) ? {2'b00,cw0_i[3:0]} : cw0_i;

assign cw1_o = (ControlWord[7:6] == 2'b01) ? ControlWord[5:0] : 
             		(ControlWord[7:6] == 2'b11 && ControlWord[2] ==1'b1 && ControlWord[5]==1'b0) ? {2'b00,cw1_i[3:0]} : cw1_i;

assign cw2_o = (ControlWord[7:6] == 2'b10) ? ControlWord[5:0] : 
			(ControlWord[7:6] == 2'b11 && ControlWord[3] ==1'b1 && ControlWord[5]==1'b0) ? {2'b00,cw2_i[3:0]} : cw2_i;

assign EnabStatusLatches_o = (ControlWord[7:6] == 2'b11 && ControlWord[4]==1'b0 ) ? ControlWord[3:1] : EnabStatusLatches_i;


always @(posedge WriteSignal) begin
	
	ControlWord = Data;
end

always @(posedge ReadSignal) begin
	Data = ControlWord;
end


endmodule